[gd_scene load_steps=4 format=3 uid="uid://b6e5swb7oa78b"]

[sub_resource type="CompressedTexture2D" id="CompressedTexture2D_yuuf3"]

[sub_resource type="GDScript" id="GDScript_f60cv"]
script/source = "extends Node2D

\"можно задавать первоначальный масштаб, менять масштаб, менять количество
 оборотов куба, задавать время показа картинки при вращении кубика\"

@export var Scale = Vector2.ONE #экспорт переменной масштаба
@export var speed = 400
var Velocity = Vector2.ZERO
var image1: CompressedTexture2D
var image2: CompressedTexture2D
var image3: CompressedTexture2D
var image4: CompressedTexture2D
var image5: CompressedTexture2D
var image6: CompressedTexture2D
var Dice_main: Node2D
var image: CompressedTexture2D
var count = 0
var counter = 0
var cube_face = 0 #номер изабражения грани кубика для передачи дальше
var gotov = 0
signal cubu_gotov
var scale_minus = 0.9
 #значение на сколько уменьшать масштаб
var scale_vozvrat = 1
var num_revolut = 8 #количество переворотов граней куба
var time_flip = 0.1 #  время переворота грани в секундах
# Called when the node enters the scene tree for the first time.


func _ready():
	# загрузка текстур картинок
	image1 = load(\"res://Dice_sprites/Enemy/Chest.png\")
	image2 = load(\"res://Dice_sprites/Enemy/Dragon.png\")
	image3 = load(\"res://Dice_sprites/Enemy/Goblin.png\")
	image4 = load(\"res://Dice_sprites/Enemy/Potion.png\")
	image5 = load(\"res://Dice_sprites/Enemy/Skeleton.png\")
	image6 = load(\"res://Dice_sprites/Enemy/Slime.png\")
	# первоначальная установка масштаба
	Scale.x = 1.5
	Scale.y = 1.5
	apply_scale(Scale)
	
	
func scale_vozv(scale_x):
	# функция расчета коэффициента возврата масштаба в начальное положение для 
	# переброски куба
	#print(scale_x)
	scale_vozvrat = scale_x*scale_vozvrat
	
	
func fall_dice(): #падение кубика
	scale_vozvrat = 1/scale_vozvrat
	Scale.x = scale_vozvrat # Возврат первоначального размера масштаба
	Scale.y = scale_vozvrat
	apply_scale(Scale)# установка 100% значения от которого будем уменьшать
	scale_vozvrat = 1
	Scale.x = 1
	Scale.y = 1
	# время задержки для показывания картинки при перелистывании
	$Timer_busting.start(time_flip)
	# выбор рандомного числа от 1 до 6
	var random_number = randi() % 6 + 1
	count = random_number
	_on_timer_busting_timeout()
	if (random_number+num_revolut)%6 == 0:
		cube_face = 6
	else:
		cube_face = (random_number+num_revolut)%6 
	
	
func busting_the_dice(i):
	# показ картинок граней
	# выбор соответствующей картинки
	var numb = i
	var random_number = numb%6
	if random_number == 1:
		image = image1
	elif random_number == 2:
		image = image2
	elif random_number == 3:
		image = image3
	elif random_number == 4:
		image = image4
	elif random_number == 5:
		image = image5
	elif random_number == 0:
		image = image6
	else:
		print(\"error\",random_number,\" \",numb)
	# установка выбранной картинки видимой
	$Sprite2D.texture = image
	
	
# Called every frame. 'delta' is the elapsed time since the previous frame.
@warning_ignore(\"unused_parameter\")
func _process(delta):
	pass
	

func _on_timer_busting_timeout():
	# циклическая переборка картинок и их показ
	if counter < num_revolut:
		counter += 1
		count += 1
		Velocity.x += 50
		Velocity.y += 50
		#уменьшение масштаба картинки
		Scale.x = scale_minus
		Scale.y = scale_minus
		scale_vozv(Scale.x)
		apply_scale(Scale)
		# запуск показа картинок граней
		busting_the_dice(count)
	else :
		# остановка таймера и переборки картинок
		gotov = 1
		counter = 0
		$Timer_busting.stop()
		# передача сигнала о готовности куба и его значение
		emit_signal(\"cubu_gotov\",cube_face,gotov)
		
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_autnt"]
size = Vector2(578, 568)

[node name="Dice" type="Node2D"]
metadata/_edit_group_ = true

[node name="Dice_main" type="Sprite2D" parent="."]
unique_name_in_owner = true
texture = SubResource("CompressedTexture2D_yuuf3")
script = SubResource("GDScript_f60cv")
Scale = Vector2(0.7, 0.7)

[node name="Timer_busting" type="Timer" parent="Dice_main"]
process_mode = 1
wait_time = 0.2

[node name="Button" type="Button" parent="Dice_main"]
visible = false
anchors_preset = -1
anchor_left = -252.5
anchor_top = -245.5
anchor_right = 253.5
anchor_bottom = 246.5
offset_left = -0.655182
offset_top = 0.671341
offset_right = -0.655182
offset_bottom = 0.671341
grow_horizontal = 2
grow_vertical = 2
rotation = 0.000432387
pivot_offset = Vector2(250.748, 244.062)
metadata/_edit_use_anchors_ = true

[node name="Sprite2D" type="Sprite2D" parent="Dice_main"]

[node name="RigidBody2D" type="RigidBody2D" parent="Dice_main"]

[node name="CollisionShape2D" type="CollisionShape2D" parent="Dice_main/RigidBody2D"]
shape = SubResource("RectangleShape2D_autnt")

[connection signal="timeout" from="Dice_main/Timer_busting" to="Dice_main" method="_on_timer_busting_timeout"]
