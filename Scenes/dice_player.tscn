[gd_scene load_steps=3 format=3 uid="uid://b5quk5jybqi1m"]

[sub_resource type="GDScript" id="GDScript_f60cv"]
script/source = "extends Node2D

\"можно задавать первоначальный масштаб, менять масштаб, менять количество
 оборотов куба, задавать время показа картинки при вращении кубика\"

var Scale = Vector2.ONE #экспорт переменной масштаба
@export var speed = 400
var Velocity = Vector2.ZERO #переменная перемещения
var image1: CompressedTexture2D
var image2: CompressedTexture2D
var image3: CompressedTexture2D
var image4: CompressedTexture2D
var image5: CompressedTexture2D
var image6: CompressedTexture2D
var Dice_main: Node2D
var image: CompressedTexture2D
var count = 0
var counter = 0
var cube_face = 0 #номер изабражения грани кубика для передачи дальше
var gotov = 0
signal cubu_gotov
var scale_vozvrat = 1
var num_revolut = 12 #количество переворотов граней куба
var time_flip = 0.13#  время переворота грани в секундах
var name_face = \"player\"
var scale_minus = 1-(0.5/num_revolut) #значение на сколько уменьшать масштаб
var x = 0 # приём значения о конечном местоположении
var y = 0


# Called when the node enters the scene tree for the first time.
func _ready():
	# загрузка текстур картинок
	image1 = load(\"res://Dice_sprites/Player/Cleric.png\")
	image2 = load(\"res://Dice_sprites/Player/Guardian.png\")
	image3 = load(\"res://Dice_sprites/Player/Magician.png\")
	image4 = load(\"res://Dice_sprites/Player/Scroll.png\")
	image5 = load(\"res://Dice_sprites/Player/Thief.png\")
	image6 = load(\"res://Dice_sprites/Player/Warrior.png\")
	# первоначальная установка масштаба
	Scale.x = 0.8
	Scale.y = 0.8
	apply_scale(Scale)
	
	
func scale_vozv(scale_x):
	# функция расчета коэффициента возврата масштаба в начальное положение для 
	# переброски куба
	scale_vozvrat = scale_x*scale_vozvrat
	
	
func fall_dice(a,b): #падение кубика
	Velocity = Vector2.ZERO #задание стартового местоположения вцентре
	set_position(Velocity) # запись местоположения 
	x = a # приём значения о конечном местоположении
	y = b
	scale_vozvrat = 1/scale_vozvrat
	Scale.x = scale_vozvrat # Возврат первоначального размера масштаба
	Scale.y = scale_vozvrat
	apply_scale(Scale)# установка 100% значения от которого будем уменьшать
	scale_vozvrat = 1
	Scale.x = 1
	Scale.y = 1
	# время задержки для показывания картинки при перелистывании
	$Timer_busting.start(time_flip)
	# выбор рандомного числа от 1 до 6
	var random_number = randi() % 6 + 1
	count = random_number
	_on_timer_busting_timeout()
	#print(a,b,x,y)
	if (random_number+num_revolut)%6 == 0:
		cube_face = 6
	else:
		cube_face = (random_number+num_revolut)%6 
	
	
func busting_the_dice(i):
	# показ картинок граней
	# выбор соответствующей картинки
	var numb = i
	var random_number = numb%6
	if random_number == 1:
		image = image1
		name_face = \"Chest\"
	elif random_number == 2:
		image = image2
		name_face = \"Dragon\"
	elif random_number == 3:
		image = image5
		name_face = \"Skeleton\"
	elif random_number == 4:
		image = image6
		name_face = \"Slime\"
	elif random_number == 5:
		image = image3
		name_face = \"Goblin\"
	elif random_number == 0:
		image = image4
		name_face = \"Potion\"
	else:
		print(\"error\",random_number,\" \",numb)
	# установка выбранной картинки видимой
	$Sprite2D.texture = image
	
	
# Called every frame. 'delta' is the elapsed time since the previous frame.
#@warning_ignore(\"unused_parameter\")
func _process(delta):
	#move_and_slide(Velocity)
	pass
	

func _on_timer_busting_timeout():
	# циклическая переборка картинок и их показ
	if counter < num_revolut:
		counter += 1
		count += 1
		Velocity.x += x/num_revolut #изменение координат для местоположения
		Velocity.y += y/num_revolut
		set_position(Velocity)
		#уменьшение масштаба картинки
		Scale.x = scale_minus
		Scale.y = scale_minus
		scale_vozv(Scale.x)
		apply_scale(Scale)
		# запуск показа картинок граней
		busting_the_dice(count)
	else :
		# остановка таймера и переборки картинок
		gotov = 1
		counter = 0
		set_position(Velocity)
		$Timer_busting.stop()
		# передача сигнала о готовности куба и его значение
		emit_signal(\"cubu_gotov\",str(cube_face),name_face)
		print(Velocity)
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_autnt"]
size = Vector2(578, 568)

[node name="Dice" type="Node2D"]
metadata/_edit_group_ = true

[node name="Dice_main" type="Sprite2D" parent="."]
unique_name_in_owner = true
script = SubResource("GDScript_f60cv")

[node name="Timer_busting" type="Timer" parent="Dice_main"]
process_mode = 1
wait_time = 0.2

[node name="Button" type="Button" parent="Dice_main"]
visible = false
anchors_preset = 8
anchor_left = 0.5
anchor_top = 0.5
anchor_right = 0.5
anchor_bottom = 0.5
offset_left = -267.5
offset_top = -245.5
offset_right = 239.5
offset_bottom = 255.5
grow_horizontal = 2
grow_vertical = 2
rotation = 0.00179119
pivot_offset = Vector2(258, 248)

[node name="Sprite2D" type="Sprite2D" parent="Dice_main"]

[node name="RigidBody2D" type="RigidBody2D" parent="Dice_main"]
can_sleep = false

[node name="CollisionShape2D" type="CollisionShape2D" parent="Dice_main/RigidBody2D"]
shape = SubResource("RectangleShape2D_autnt")

[connection signal="timeout" from="Dice_main/Timer_busting" to="Dice_main" method="_on_timer_busting_timeout"]
